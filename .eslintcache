[{"/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/index.js":"1","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/App.js":"2","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/main/main.js":"3","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/main/intro.js":"4","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/signup.js":"5","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/result.js":"6","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/main/openning.js":"7","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/signin.js":"8","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/share.js":"9","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/mypage.js":"10","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/mymenu.js":"11","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/main/main-header.js":"12","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/main/main-chef.js":"13","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/main/main-ingredients.js":"14","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/myinfo.js":"15"},{"size":474,"mtime":1608795486578,"results":"16","hashOfConfig":"17"},{"size":4773,"mtime":1609758891559,"results":"18","hashOfConfig":"17"},{"size":4427,"mtime":1609759359915,"results":"19","hashOfConfig":"17"},{"size":299,"mtime":1609120531551,"results":"20","hashOfConfig":"17"},{"size":3272,"mtime":1609745764405,"results":"21","hashOfConfig":"17"},{"size":2335,"mtime":1609676386299,"results":"22","hashOfConfig":"17"},{"size":2310,"mtime":1609339958482,"results":"23","hashOfConfig":"17"},{"size":4647,"mtime":1609752855315,"results":"24","hashOfConfig":"17"},{"size":1508,"mtime":1609745764404,"results":"25","hashOfConfig":"17"},{"size":4714,"mtime":1609754079387,"results":"26","hashOfConfig":"17"},{"size":1398,"mtime":1609735135165,"results":"27","hashOfConfig":"17"},{"size":509,"mtime":1609687609986,"results":"28","hashOfConfig":"17"},{"size":455,"mtime":1609120531553,"results":"29","hashOfConfig":"17"},{"size":2935,"mtime":1609745764399,"results":"30","hashOfConfig":"17"},{"size":5092,"mtime":1609745764401,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"xqe7w6",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/index.js",[],["70","71"],"/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/App.js",[],"/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/main/main.js",[],"/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/main/intro.js",[],"/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/signup.js",["72"],"import React, { Component } from 'react'\nimport logo from './img2/logo.png'\nimport x from './img2/X.png'\nimport {withRouter} from 'react-router-dom'\n\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      email: \"\",\n      userName: \"\",\n      password: \"\",\n      checkPassword: \"\",\n      errorMessage: \"\"\n    }\n    this.handleInputValue = this.handleInputValue.bind(this);\n    this.signupRequestHandler = this.signupRequestHandler.bind(this);\n  }\n\n  handleInputValue(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  signupRequestHandler() {\n    const {email, username, password, checkPassword} = this.state;\n    if(!email || !username || !password || !checkPassword) {\n      this.setState({ errorMessage: '모든 항목을 입력해주세요' });\n    }\n    else {\n      fetch('https://onemeal.site/users/signup', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      credentials: 'include',\n      body: JSON.stringify({ email: email, username: username, password: password })\n      })\n      .then(res => res.json())\n      .then(res => {\n        if(res.message === 'email exists') {\n          this.setState({errorMessage: '이미 존재하는 이메일입니다.'})\n        }\n        else {\n          this.props.handleSignupView();\n        }\n      })\n    }\n  }\n  \n\n  render() {\n    return (\n      <div className=\"back\">\n        <div className='loginContainer'>\n        <img className='X' src={x} onClick={this.props.loginModalHandler}/>\n          <div className=\"middleContainer\">\n            <img className=\"go\" src={logo} alt=\"go\" />\n            <input\n              className=\"inputBox\"\n              name='email'\n              onChange={(e) => this.handleInputValue(e)}\n              placeholder='이메일'\n              type='text' />\n            <div className='block' />\n            <input\n              className=\"inputBox\"\n              name='username'\n              onChange={(e) => this.handleInputValue(e)}\n              placeholder='이름'\n              type='text' />\n            <div className='block' />\n            <input\n              className=\"inputBox\"\n              name='password'\n              onChange={(e) => this.handleInputValue(e)}\n              placeholder='비밀번호'\n              type='password' />\n            <div className='block' />\n            <input\n              className=\"inputBox\"\n              name='checkPassword'\n              onChange={(e) => this.handleInputValue(e)}\n              placeholder='비밀번호 확인'\n              type='password' />\n            <div className='block' />\n            <button className=\"button\" onClick={this.signupRequestHandler}>회원가입</button>\n            <div className='block' />\n            <div className=\"alert-box\">{this.state.errorMessage}</div>\n            <div className='block' />\n            <span className=\"text\">\n              아이디가 있으신가요?\n              <span className=\"text2\" onClick={this.props.handleSignupView}>로그인</span>\n            </span>\n            <div className='block' />\n          </div>\n          <div className=\"ex\">2021 Baegopujo all rights reserved.</div>\n        </div>\n      </div >\n    )\n  }\n}\n\n\nexport default withRouter(Signup)","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/result.js",["73","74"],"import React, { Component } from 'react'\nimport x from './img2/X.png'\nimport { Link, withRouter } from 'react-router-dom'\nimport axios from 'axios'\n\n\nclass Result extends Component {\n    constructor(props) {\n        super(props)\n        this.openLoginModal = this.openLoginModal.bind(this)\n        this.saveClick=this.saveClick.bind(this)\n    }\n\n    openLoginModal() {\n        this.props.resultModalHandler();\n        this.props.loginModalHandler();\n    }\n\n    saveClick(){\n        if(!this.props.isLogin) {\n            return alert('로그인이 필요합니다!')\n        }\n        axios.post(\"https://onemeal.site/users/saverecipe\" ,{\n            foodName: this.props.resultMenu.foodName,\n            foodImg :this.props.resultMenu.foodImg,\n            link : this.props.resultMenu.link\n        }, \n        {withCredentials: true})\n        .then(res => {\n            if(res.data.message === 'recipre exists') {\n                return alert('이미 같은 메뉴가 저장되었습니다!');\n            }\n            alert('저장이 완료되었습니다!');\n        })\n        .catch(err => {\n            console.log(err)\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"back\">\n                <div className='loginContainer'>\n                    <img className='X' src={x} onClick={this.props.resultModalHandler} />\n                    <div className=\"middleContainer\">\n                        <div className=\"title\">{this.props.resultMenu.foodName}</div>\n                        <div className=\"resultName\"></div>\n                        <a href={this.props.resultMenu.link} target=\"_blank\"><img className=\"resultImg\" src={this.props.resultMenu.foodImg} alt=\"foodimg\"/></a>\n                        <div className=\"save\" onClick={this.saveClick}>저장하기</div>\n                        <div className='block' />\n                        {\n                            this.props.isLogin ?\n                            <Link to=\"/mypage\" className=\"goMyPage\">마이페이지에서 확인하세요!</Link> :\n                            <Link to=\"/main\" className=\"goMyPage\" onClick={this.openLoginModal}>마이페이지에서 확인하세요!</Link>\n                        }\n                    </div>\n                </div>\n            </div >\n        )\n    }\n}\n\n\nexport default withRouter(Result)\n\n\n",["75","76"],"/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/main/openning.js",[],"/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/signin.js",["77"],"import React, { Component } from 'react'\nimport logo from './img2/logo.png'\nimport github from './img2/github.png'\nimport google from './img2/google.png'\nimport { withRouter } from 'react-router-dom'\n\nimport x from './img2/X.png'\nimport Signup from './signup'\n\nrequire('dotenv').config(); \n\nclass Signin extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      email: \"\",\n      password: \"\",\n      showSignupView: false,\n      errorMessage: \"\",\n      googleId: \"\"\n    };\n    this.handleInputValue = this.handleInputValue.bind(this);\n    this.loginRequestHandler = this.loginRequestHandler.bind(this);\n    this.handleSignupView = this.handleSignupView.bind(this);\n    this.socialLoginHandler = this.githubLoginHandler.bind(this);\n    this.getUserInfo = this.getUserInfo.bind(this);\n  }\n\n  async githubLoginHandler() {\n    console.log(`누가누가 먼저 실행되나 나는 githubLoginHandler 그리고 로컬스토리지에 ${JSON.parse(localStorage.getItem('userInfo'))}`) //************************************************* */\n    let GITHUB_LOGIN_URL = `https://github.com/login/oauth/authorize?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}`\n    window.location.assign(GITHUB_LOGIN_URL)\n    let username = JSON.parse(localStorage.getItem('userInfo')).username\n    this.props.loginHandler(username);\n  }\n\n  handleInputValue(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  \n  handleSignupView() {\n    this.setState({ showSignupView: !this.state.showSignupView });\n  }\n\n\n  async loginRequestHandler() {\n    const { email, password } = this.state;\n\n    if (email === \"\" || password === \"\") {\n      this.setState({\n        errorMessage: \"모든항목을 입력해주세요\"\n      })\n    }\n    else {\n     fetch('https://onemeal.site/users/login', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      credentials: 'include',\n      body: JSON.stringify({email: email , password : password})\n      })\n      .then(res => res.json())\n      .then(res => {\n        if(res.message === \"hashPwd exists\" || res.message === \"Not authorized\") {\n          alert('존재하지 않는 사용자 이메일 혹은 비밀번호 입니다.')\n        }\n        else {\n          this.getUserInfo();\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n    }\n  }\n\n  /* 유저인포 불러오는 함수 */\n  getUserInfo() {\n    fetch('https://onemeal.site/users/userinfo', {\n    method: 'get',\n    headers: { 'Content-Type': 'application/json' },\n    credentials: 'include'\n    })\n    .then(res => res.json())\n    .then(res => {\n      localStorage.setItem('userInfo', JSON.stringify(res.data));\n      this.props.loginHandler(res.data.username);\n    })\n    .catch(err => {\n      console.log(err);\n    })\n  }\n\n  render() {\n\n    return (\n      this.state.showSignupView ?\n        <Signup handleSignupView={this.handleSignupView} loginModalHandler={this.props.loginModalHandler} /> :\n        <div className=\"back\">\n          <div className='loginContainer'>\n            <img className='X' src={x} onClick={this.props.loginModalHandler} />\n            <div className=\"middleContainer\">\n              <img className=\"go\" src={logo} alt=\"go\" />\n              <div className='block1' />\n              <input\n                className=\"inputBox\"\n                name='email'\n                onChange={(e) => this.handleInputValue(e)}\n                placeholder='이메일'\n                type='text' />\n              <div className='block' />\n              <input\n                className=\"inputBox\"\n                name='password'\n                onChange={(e) => this.handleInputValue(e)}\n                placeholder='비밀번호'\n                type='password' />\n              <div className='block' />\n              <button className=\"button\" onClick={this.loginRequestHandler}>로그인</button>\n              <div className='block' />\n              <div className=\"alert-box\">{this.state.errorMessage}</div>\n              <div className='block' />\n              <span className=\"text\">\n                아직 아이디가 없으신가요?\n              <span className='text2' onClick={this.handleSignupView}>회원가입</span>\n              </span>\n              <div className='block' />\n              <div>\n                <img className=\"github\" src={github} alt=\"github\" onClick={this.githubLoginHandler} />  <img className=\"google\" src={google} alt=\"google\" />\n              </div>\n            </div>\n            <div className=\"ex\">2021 Baegopujo all rights reserved.</div>\n          </div>\n        </div>\n    )\n  }\n}\n\nexport default withRouter(Signin)","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/share.js",["78"],"import React, { Component } from 'react'\nimport kakao from './img2/kakao.png'\nimport x from './img2/X.png'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios'\n\nclass Share extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            foodName: \"\",\n            foodImg: \"\"\n\n        }\n        this.signupRequestHandler = this.signupRequestHandler.bind(this);\n    }\n\n  \n\n    async signupRequestHandler() {\n        await axios.get(\"https://onemeal.site/resultrecipe\",{ foodName: this.foodName, foodImg: this.foodImg },{headers: { 'Content-Type': 'application/json'} ,withCredentials: true})\n    }\n\n\n    render() {\n        return (\n            <div className=\"back\">\n                <div className='loginContainer'>\n                    <img className='X' src={x} onClick={this.props.loginModalHandler} />\n                    <div className=\"middleContainer\">\n                        <div className=\"title\">셰프의 선택은</div>\n                        <div className=\"resultName\">계란 볶음밥</div>\n                        <div className=\"resultImg\" />\n                        <div className=\"text\">친구들에게 <span className=\"text1\">고독한 한끼</span>를 소개해보세요!</div>\n                        <div className='block' />\n                        <img className='kakao' src={kakao} alt='kakao'/>\n                    </div>\n                </div>\n            </div >\n        )\n    }\n}\n\n\nexport default withRouter(Share)\n\n\n      ","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/mypage.js",["79"],"import React, { Component } from 'react'\nimport axios from 'axios'\nimport { withRouter } from 'react-router-dom'\nimport MainHeader from '../main/main-header'\nimport MyInfo from './myinfo'\nimport MyMenu from './mymenu.js'\nimport Share from './share'\nimport { Link } from 'react-router-dom'\nimport leftArrow from '../main/img/left-arrow.png'\nimport blankPic from './img2/blank.png'\n\nclass Mypage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isResultModalOpen: false,\n      userInfo: {\n        username: '',\n        email: '',\n        password: '',\n        userImg: blankPic,\n        save: [\n          \n        ]\n      }\n    };\n    this.getUserInfo = this.getUserInfo.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n    this.deleteRecipeLog = this.deleteRecipeLog.bind(this);\n  }\n\n  /* 만약 로컬스토리지와 스테이트의 유저인포가 다를 때 유저정보 자동갱신 */\n  componentDidMount() {\n    this.getUserInfo();\n    this.props.LoginChecker();\n    this.props.maintainToken();\n  }\n\n  /* 레시피 로그 삭제 함수 */\n  deleteRecipeLog(e){\n    console.log(e.target.alt)\n    console.log(e.target)\n     //x클릭한 정보 db에서 삭제\n     const url = 'https://onemeal.site/users/deleterecipe'\n    fetch(url,{\n      method : 'post',\n      headers:{\n        'Accept' : 'application/json',\n        'Content-Type' : 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify({id: e.target.alt })\n    })\n    //삭제된 db에서 정보 제 업로딩\n    .then(res => {\n      console.log(res.json());\n      this.getUserInfo();\n    })\n  }\n\n  /* 유저정보 불러오는 함수 */\n  getUserInfo() {\n    let userInfo = JSON.parse(localStorage.getItem('userInfo'));\n    if(this.props.accessToken) {\n      let getInfo = JSON.parse(localStorage.getItem('userInfo'))\n      this.setState({\n        userInfo: {\n          username: getInfo.username,\n          email: getInfo.email,\n          userImg: getInfo.userImg\n        }\n      })\n      console.log('스토리지에 저장된 깃헙인포를 가져왔어요');\n      this.props.history.push(\"/mypage\");\n    }\n    else {\n      fetch('https://onemeal.site/users/userinfo', {\n      method: 'get',\n      headers: { 'Content-Type': 'application/json' },\n      credentials: 'include'\n      })\n      .then(res => res.json())\n      .then(res => {\n        localStorage.setItem('userInfo', JSON.stringify(res.data));\n        localStorage.setItem('recipelog', JSON.stringify(res.log));\n        let getInfo = JSON.parse(localStorage.getItem('userInfo'))\n        let getlog = JSON.parse(localStorage.getItem('recipelog'))\n        this.setState({\n          userInfo: {\n            username: getInfo.username,\n            email: getInfo.email,\n            password: getInfo.password,\n            userImg: `https://onemeal.site/userImg/${getInfo.userImg}`,\n            save: getlog\n          }\n        })\n        this.props.history.push(\"/mypage\");\n      })\n      .catch(err => {\n        console.log(err);\n      })\n    }\n  }\n\n    /* 로그아읏 함수 */\n    handleLogout() {\n      // 깃헙 로그아웃\n      if (this.props.accessToken) {\n        this.props.githubLogout();\n        alert('성공적으로 로그아웃 되었습니다!')\n        this.props.history.push(\"/main\");\n      }\n      // 일반 로그아웃\n      else {\n        axios({\n          method: 'POST',\n          url: 'https://onemeal.site/users/logout',\n          headers: { 'Content-Type': 'application/json' },\n          withCredentials: true\n        })\n        .then(() => {\n          this.props.handleLogin();\n          localStorage.clear();\n        })\n        .then(() => {\n          alert('성공적으로 로그아웃 되었습니다!')\n          this.props.history.push(\"/main\");\n        })\n      }\n    }\n\n    render() {\n      const { isResultModalOpen, userInfo } = this.state;\n      const { accessToken } = this.props;\n      return (\n        <div className='my-wrap'>\n          <MainHeader isLogin={this.props.isLogin} username={userInfo.username} loginModalHandler={this.loginModalHandler} />\n          <div className='my-container'>\n            <MyInfo userInfo={userInfo} getUserInfo={this.getUserInfo} accessToken={accessToken} />\n            <MyMenu save={userInfo.save} deleteRecipeLog={this.deleteRecipeLog} accessToken={accessToken} />\n          </div>\n          <Link to=\"/main\" className='my-pieaceOfMainpage'><img src={leftArrow} alt='' className='l-arrow' /></Link>\n          <button className='my-logout-button' onClick={this.handleLogout}>로그아웃</button>\n          { isResultModalOpen ? <Share /> : null}\n        </div>\n      );\n    }\n  }\n\n\n\n  export default withRouter(Mypage);\n","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/mymenu.js",["80","81"],"import React, { Component } from 'react'\nimport x from './img2/X.png'\n\n\nfunction Recomend({foodName,foodImg,foodLink,saveDate, deleteRecipeLog,id}) {\n\n  return (\n    <div className=\"saveResult\">\n      <a href={foodLink} target=\"_blank\"><img className=\"saveresultImg\" src={foodImg} alt=\"foodimg\"/></a>\n      <div className=\"saveresultEx\">\n        <div className=\"explainName\">{foodName}</div>\n        <div className=\"block\"></div>\n        <div className=\"explainData\">{saveDate}</div>\n      </div>\n      <img className=\"deleteButton\" src={x} alt={id} onClick={(e)=>deleteRecipeLog(e)}/>\n    </div>\n  )\n}\n\nclass MyMenu extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const {accessToken, deleteRecipeLog} = this.props;\n    \n    return (\n      <div className={accessToken ? 'my-menu-wrap-github' : 'my-menu-wrap'}>\n        {accessToken ? null : <div className=\"menuInt\">추천받은 음식</div>}\n        {accessToken ? null : <div className=\"block\" />}\n        {\n          accessToken ?\n          null : \n          <div className=\"saveResultbox\">\n            {\n              this.props.save.map(item => <Recomend key={item.id} id = {item.id} foodName={item.foodName} foodImg={item.foodImg} foodLink ={item.link} saveDate={item.createdAt} deleteRecipeLog={deleteRecipeLog}/>)\n            }\n          </div >\n        } \n      </div>\n    )\n  }\n}\n\nexport default MyMenu;","/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/main/main-header.js",[],"/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/main/main-chef.js",[],"/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/main/main-ingredients.js",[],"/Users/kimtaesu/Desktop/Lonelyonemeal-client/src/components/user/myinfo.js",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":54,"column":9,"nodeType":"88","endLine":54,"endColumn":76},{"ruleId":"86","severity":1,"message":"87","line":44,"column":21,"nodeType":"88","endLine":44,"endColumn":90},{"ruleId":"89","severity":1,"message":"90","line":48,"column":62,"nodeType":"91","endLine":48,"endColumn":77},{"ruleId":"82","replacedBy":"92"},{"ruleId":"84","replacedBy":"93"},{"ruleId":"86","severity":1,"message":"87","line":100,"column":13,"nodeType":"88","endLine":100,"endColumn":81},{"ruleId":"86","severity":1,"message":"87","line":29,"column":21,"nodeType":"88","endLine":29,"endColumn":89},{"ruleId":"94","severity":1,"message":"95","line":63,"column":9,"nodeType":"96","messageId":"97","endLine":63,"endColumn":17},{"ruleId":"89","severity":1,"message":"90","line":9,"column":26,"nodeType":"91","endLine":9,"endColumn":41},{"ruleId":"98","severity":1,"message":"99","line":21,"column":3,"nodeType":"100","messageId":"101","endLine":23,"endColumn":4},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["102"],["103"],"no-unused-vars","'userInfo' is assigned a value but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]
